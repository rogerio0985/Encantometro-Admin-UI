(function (define) {
    define(['jquery'], function ($) {
      return (function () {
        var eaf = window.eaf || {};

        /* Application paths *****************************************/

        //Current application root path (including virtual directory if exists).
        eaf.appPath = eaf.appPath || '/';
        eaf.domain = eaf.domain || '';
        eaf.pageLoadTime = new Date();

        //Converts given path to absolute path using eaf.appPath variable.
        eaf.toAbsAppPath = function (path) {
          if (path.indexOf('/') == 0) {
            path = path.substring(1);
          }

          return eaf.appPath + path;
        };

        /* MULTITENANCY */

        eaf.multiTenancy = eaf.multiTenancy || {};

      eaf.multiTenancy.isEnabled = false;
      eaf.multiTenancy.ignoreFeatureCheckForHostUsers = false;

        eaf.multiTenancy.sides = {
          TENANT: 1,
          HOST: 2
        };

        eaf.multiTenancy.tenantIdCookieName = 'Eaf.TenantId';

        eaf.multiTenancy.setTenantIdCookie = function (tenantId) {
          if (tenantId) {
            eaf.utils.setCookieValue(
              eaf.multiTenancy.tenantIdCookieName,
              tenantId.toString(),
              new Date(new Date().getTime() + 5 * 365 * 86400000), //5 years
              eaf.appPath,
              eaf.domain
            );
          } else {
            eaf.utils.deleteCookie(eaf.multiTenancy.tenantIdCookieName, eaf.appPath);
          }
        };

        eaf.multiTenancy.getTenantIdCookie = function () {
          var value = eaf.utils.getCookieValue(eaf.multiTenancy.tenantIdCookieName);
          if (!value) {
            return null;
          }

          return parseInt(value);
        }

        /* SESSION */

        eaf.session = eaf.session ||
          {
            multiTenancySide: eaf.multiTenancy.sides.HOST
          };

        /* LOCALIZATION ***********************************************/
        //Implements Localization API that simplifies usage of localization scripts generated by eaf.

        eaf.localization = eaf.localization || {};

        eaf.localization.languages = [];

        eaf.localization.currentLanguage = {};

        eaf.localization.sources = [];

        eaf.localization.values = {};

        eaf.localization.localize = function (key, sourceName) {
          sourceName = sourceName || eaf.localization.defaultSourceName;

          var source = eaf.localization.values[sourceName];

          if (!source) {
            eaf.log.warn('Could not find localization source: ' + sourceName);
            return key;
          }

          var value = source[key];
          if (value == undefined) {
            return key;
          }

          var copiedArguments = Array.prototype.slice.call(arguments, 0);
          copiedArguments.splice(1, 1);
          copiedArguments[0] = value;

          return eaf.utils.formatString.apply(this, copiedArguments);
        };

        eaf.localization.getSource = function (sourceName) {
          return function (key) {
            var copiedArguments = Array.prototype.slice.call(arguments, 0);
            copiedArguments.splice(1, 0, sourceName);
            return eaf.localization.localize.apply(this, copiedArguments);
          };
        };

        eaf.localization.isCurrentCulture = function (name) {
          return eaf.localization.currentCulture
            && eaf.localization.currentCulture.name
            && eaf.localization.currentCulture.name.indexOf(name) == 0;
        };

        eaf.localization.defaultSourceName = undefined;
        eaf.localization.eaf = eaf.localization.getSource('Eaf');

        /* AUTHORIZATION **********************************************/
        //Implements Authorization API that simplifies usage of authorization scripts generated by eaf.

        eaf.auth = eaf.auth || {};

        eaf.auth.allPermissions = eaf.auth.allPermissions || {};

        eaf.auth.grantedPermissions = eaf.auth.grantedPermissions || {};

        //Deprecated. Use eaf.auth.isGranted instead.
        eaf.auth.hasPermission = function (permissionName) {
          return eaf.auth.isGranted.apply(this, arguments);
        };

        //Deprecated. Use eaf.auth.isAnyGranted instead.
        eaf.auth.hasAnyOfPermissions = function () {
          return eaf.auth.isAnyGranted.apply(this, arguments);
        };

        //Deprecated. Use eaf.auth.areAllGranted instead.
        eaf.auth.hasAllOfPermissions = function () {
          return eaf.auth.areAllGranted.apply(this, arguments);
        };

        eaf.auth.isGranted = function (permissionName) {
          return eaf.auth.grantedPermissions[permissionName] != undefined;
        };

        eaf.auth.isAnyGranted = function () {
          if (!arguments || arguments.length <= 0) {
            return true;
          }

          for (var i = 0; i < arguments.length; i++) {
            if (eaf.auth.isGranted(arguments[i])) {
              return true;
            }
          }

          return false;
        };

        eaf.auth.areAllGranted = function () {
          if (!arguments || arguments.length <= 0) {
            return true;
          }

          for (var i = 0; i < arguments.length; i++) {
            if (!eaf.auth.isGranted(arguments[i])) {
              return false;
            }
          }

          return true;
        };

        eaf.auth.tokenCookieName = 'Eaf.AuthToken';

        eaf.auth.setToken = function (authToken, expireDate) {
          eaf.utils.setCookieValue(eaf.auth.tokenCookieName, authToken, expireDate, eaf.appPath, eaf.domain);
        };

        eaf.auth.getToken = function() {
            return eaf.utils.getCookieValue(eaf.auth.tokenCookieName);
        };

        eaf.auth.clearToken = function() {
            eaf.auth.setToken();
        };

        eaf.auth.refreshTokenCookieName = 'Eaf.AuthRefreshToken';

        eaf.auth.setRefreshToken = function (refreshToken, expireDate) {
            eaf.utils.setCookieValue(eaf.auth.refreshTokenCookieName, refreshToken, expireDate, eaf.appPath, eaf.domain);
        };

        eaf.auth.getRefreshToken = function() {
            return eaf.utils.getCookieValue(eaf.auth.refreshTokenCookieName);
        };

        eaf.auth.clearRefreshToken = function() {
            eaf.auth.setRefreshToken();
        };

        /* FEATURE SYSTEM *********************************************/
        //Implements Features API that simplifies usage of feature scripts generated by eaf.

        eaf.features = eaf.features || {};

        eaf.features.allFeatures = eaf.features.allFeatures || {};

        eaf.features.get = function (name) {
          return eaf.features.allFeatures[name];
        }

        eaf.features.getValue = function (name) {
          var feature = eaf.features.get(name);
          if (feature == undefined) {
            return undefined;
          }

          return feature.value;
        }

        eaf.features.isEnabled = function (name) {
          var value = eaf.features.getValue(name);
          return value == 'true' || value == 'True';
        }

        /* SETTINGS **************************************************/
        //Implements Settings API that simplifies usage of setting scripts generated by eaf.

        eaf.setting = eaf.setting || {};

        eaf.setting.values = eaf.setting.values || {};

        eaf.setting.get = function (name) {
          return eaf.setting.values[name];
        };

        eaf.setting.getBoolean = function (name) {
          var value = eaf.setting.get(name);
          return value == 'true' || value == 'True';
        };

        eaf.setting.getInt = function (name) {
          return parseInt(eaf.setting.values[name]);
        };

        /* REALTIME NOTIFICATIONS ************************************/

        eaf.notifications = eaf.notifications || {};

        eaf.notifications.severity = {
          INFO: 0,
          SUCCESS: 1,
          WARN: 2,
          ERROR: 3,
          FATAL: 4
        };

        eaf.notifications.userNotificationState = {
          UNREAD: 0,
          READ: 1
        };

        eaf.notifications.getUserNotificationStateAsString = function (userNotificationState) {
          switch (userNotificationState) {
            case eaf.notifications.userNotificationState.READ:
              return 'READ';
            case eaf.notifications.userNotificationState.UNREAD:
              return 'UNREAD';
            default:
              eaf.log.warn('Unknown user notification state value: ' + userNotificationState)
              return '?';
          }
        };

        eaf.notifications.getUiNotifyFuncBySeverity = function (severity) {
          switch (severity) {
            case eaf.notifications.severity.SUCCESS:
              return eaf.notify.success;
            case eaf.notifications.severity.WARN:
              return eaf.notify.warn;
            case eaf.notifications.severity.ERROR:
              return eaf.notify.error;
            case eaf.notifications.severity.FATAL:
              return eaf.notify.error;
            case eaf.notifications.severity.INFO:
            default:
              return eaf.notify.info;
          }
        };

        eaf.notifications.messageFormatters = {};

        eaf.notifications.messageFormatters['Eaf.Notifications.MessageNotificationData'] = function (userNotification) {
          return userNotification.notification.data.message || userNotification.notification.data.properties.Message;
        };

        eaf.notifications.messageFormatters['Eaf.Notifications.LocalizableMessageNotificationData'] =
          function (userNotification) {
            var message = userNotification.notification.data.message ||
              userNotification.notification.data.properties.Message;
            var localizedMessage = eaf.localization.localize(
              message.name,
              message.sourceName
            );

            if (userNotification.notification.data.properties) {
              if ($) {
                //Prefer to use jQuery if possible
                $.each(userNotification.notification.data.properties, function (key, value) {
                  localizedMessage = localizedMessage.replace('{' + key + '}', value);
                });
              } else {
                //alternative for $.each
                var properties = Object.keys(userNotification.notification.data.properties);
                for (var i = 0; i < properties.length; i++) {
                  localizedMessage = localizedMessage.replace('{' + properties[i] + '}',
                    userNotification.notification.data.properties[properties[i]]);
                }
              }
            }

            return localizedMessage;
          };

        eaf.notifications.getFormattedMessageFromUserNotification = function (userNotification) {
          var formatter = eaf.notifications.messageFormatters[userNotification.notification.data.type];
          if (!formatter) {
            eaf.log.warn('No message formatter defined for given data type: ' + userNotification.notification.data.type)
            return '?';
          }

          if (!eaf.utils.isFunction(formatter)) {
            eaf.log.warn('Message formatter should be a function! It is invalid for data type: ' +
              userNotification.notification.data.type)
            return '?';
          }

          return formatter(userNotification);
        }

        eaf.notifications.showUiNotifyForUserNotification = function (userNotification, options) {
          var message = eaf.notifications.getFormattedMessageFromUserNotification(userNotification);
          var uiNotifyFunc = eaf.notifications.getUiNotifyFuncBySeverity(userNotification.notification.severity);
          uiNotifyFunc(message, undefined, options);
        }

        /* LOGGING ***************************************************/
        //Implements Logging API that provides secure & controlled usage of console.log

        eaf.log = eaf.log || {};

        eaf.log.levels = {
          DEBUG: 1,
          INFO: 2,
          WARN: 3,
          ERROR: 4,
          FATAL: 5
        };

        eaf.log.level = eaf.log.levels.DEBUG;

        eaf.log.log = function (logObject, logLevel) {
          if (!window.console || !window.console.log) {
            return;
          }

          if (logLevel != undefined && logLevel < eaf.log.level) {
            return;
          }

          console.log(logObject);
        };

        eaf.log.debug = function (logObject) {
          eaf.log.log(logObject, eaf.log.levels.DEBUG);
        };

        eaf.log.info = function (logObject) {
          eaf.log.log(logObject, eaf.log.levels.INFO);
        };

        eaf.log.warn = function (logObject) {
          eaf.log.log(logObject, eaf.log.levels.WARN);
        };

        eaf.log.error = function (logObject) {
          eaf.log.log(logObject, eaf.log.levels.ERROR);
        };

        eaf.log.fatal = function (logObject) {
          eaf.log.log(logObject, eaf.log.levels.FATAL);
        };

        /* NOTIFICATION *********************************************/
        //Defines Notification API, not implements it

        eaf.notify = eaf.notify || {};

        eaf.notify.success = function (message, title, options) {
          eaf.log.warn('eaf.notify.success is not implemented!');
        };

        eaf.notify.info = function (message, title, options) {
          eaf.log.warn('eaf.notify.info is not implemented!');
        };

        eaf.notify.warn = function (message, title, options) {
          eaf.log.warn('eaf.notify.warn is not implemented!');
        };

        eaf.notify.error = function (message, title, options) {
          eaf.log.warn('eaf.notify.error is not implemented!');
        };

        /* MESSAGE **************************************************/
        //Defines Message API, not implements it

        eaf.message = eaf.message || {};

      var showMessage = function (message, title, options) {
          alert((title || '') + ' ' + message);

          if (!$) {
            eaf.log.warn('eaf.message can not return promise since jQuery is not defined!');
            return null;
          }

          return $.Deferred(function ($dfd) {
            $dfd.resolve();
          });
        };

      eaf.message.info = function (message, title, options) {
          eaf.log.warn('eaf.message.info is not implemented!');
          return showMessage(message, title, options);
      };

      eaf.message.success = function (message, title, options) {
          eaf.log.warn('eaf.message.success is not implemented!');
          return showMessage(message, title, options);
      };

      eaf.message.warn = function (message, title, options) {
          eaf.log.warn('eaf.message.warn is not implemented!');
          return showMessage(message, title, options);
      };

      eaf.message.error = function (message, title, options) {
          eaf.log.warn('eaf.message.error is not implemented!');
          return showMessage(message, title, options);
      };

      eaf.message.confirm = function (message, title, callback, options) {
          eaf.log.warn('eaf.message.confirm is not implemented!');

          var result = confirm(message);
          callback && callback(result);

          if (!$) {
            eaf.log.warn('eaf.message can not return promise since jQuery is not defined!');
            return null;
          }

          return $.Deferred(function ($dfd) {
            $dfd.resolve();
          });
        };

        /* UI *******************************************************/

        eaf.ui = eaf.ui || {};

        /* UI BLOCK */
        //Defines UI Block API, not implements it

        eaf.ui.block = function (elm) {
          eaf.log.warn('eaf.ui.block is not implemented!');
        };

        eaf.ui.unblock = function (elm) {
          eaf.log.warn('eaf.ui.unblock is not implemented!');
        };

        /* UI BUSY */
        //Defines UI Busy API, not implements it

        eaf.ui.setBusy = function (elm, optionsOrPromise) {
          eaf.log.warn('eaf.ui.setBusy is not implemented!');
        };

        eaf.ui.clearBusy = function (elm) {
          eaf.log.warn('eaf.ui.clearBusy is not implemented!');
        };

        /* SIMPLE EVENT BUS *****************************************/

        eaf.event = (function () {

          var _callbacks = {};

          var on = function (eventName, callback) {
            if (!_callbacks[eventName]) {
              _callbacks[eventName] = [];
            }

            _callbacks[eventName].push(callback);
          };

          var off = function (eventName, callback) {
            var callbacks = _callbacks[eventName];
            if (!callbacks) {
              return;
            }

            var index = -1;
            for (var i = 0; i < callbacks.length; i++) {
              if (callbacks[i] === callback) {
                index = i;
                break;
              }
            }

            if (index < 0) {
              return;
            }

            _callbacks[eventName].splice(index, 1);
          };

          var trigger = function (eventName) {
            var callbacks = _callbacks[eventName];
            if (!callbacks || !callbacks.length) {
              return;
            }

            var args = Array.prototype.slice.call(arguments, 1);
            for (var i = 0; i < callbacks.length; i++) {
              callbacks[i].apply(this, args);
            }
          };

          // Public interface ///////////////////////////////////////////////////

          return {
            on: on,
            off: off,
            trigger: trigger
          };
        })();

        /* UTILS ***************************************************/

        eaf.utils = eaf.utils || {};

        /* Creates a name namespace.
        *  Example:
        *  var taskService = eaf.utils.createNamespace(eaf, 'services.task');
        *  taskService will be equal to eaf.services.task
        *  first argument (root) must be defined first
        ************************************************************/
        eaf.utils.createNamespace = function (root, ns) {
          var parts = ns.split('.');
          for (var i = 0; i < parts.length; i++) {
            if (typeof root[parts[i]] == 'undefined') {
              root[parts[i]] = {};
            }

            root = root[parts[i]];
          }

          return root;
        };

        /* Find and replaces a string (search) to another string (replacement) in
        *  given string (str).
        *  Example:
        *  eaf.utils.replaceAll('This is a test string', 'is', 'X') = 'ThX X a test string'
        ************************************************************/
        eaf.utils.replaceAll = function (str, search, replacement) {
          var fix = search.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
          return str.replace(new RegExp(fix, 'g'), replacement);
        };

        /* Formats a string just like string.format in C#.
        *  Example:
        *  eaf.utils.formatString('Hello {0}','Tuana') = 'Hello Tuana'
        ************************************************************/
        eaf.utils.formatString = function () {
          if (arguments.length < 1) {
            return null;
          }

          var str = arguments[0];

          for (var i = 1; i < arguments.length; i++) {
            var placeHolder = '{' + (i - 1) + '}';
            str = eaf.utils.replaceAll(str, placeHolder, arguments[i]);
          }

          return str;
        };

        eaf.utils.toPascalCase = function (str) {
          if (!str || !str.length) {
            return str;
          }

          if (str.length === 1) {
            return str.charAt(0).toUpperCase();
          }

          return str.charAt(0).toUpperCase() + str.substr(1);
        }

        eaf.utils.toCamelCase = function (str) {
          if (!str || !str.length) {
            return str;
          }

          if (str.length === 1) {
            return str.charAt(0).toLowerCase();
          }

          return str.charAt(0).toLowerCase() + str.substr(1);
        }

        eaf.utils.truncateString = function (str, maxLength) {
          if (!str || !str.length || str.length <= maxLength) {
            return str;
          }

          return str.substr(0, maxLength);
        };

        eaf.utils.truncateStringWithPostfix = function (str, maxLength, postfix) {
          postfix = postfix || '...';

          if (!str || !str.length || str.length <= maxLength) {
            return str;
          }

          if (maxLength <= postfix.length) {
            return postfix.substr(0, maxLength);
          }

          return str.substr(0, maxLength - postfix.length) + postfix;
        };

        eaf.utils.isFunction = function (obj) {
          if ($) {
            //Prefer to use jQuery if possible
            return $.isFunction(obj);
          }

          //alternative for $.isFunction
          return !!(obj && obj.constructor && obj.call && obj.apply);
        };

        /**
         * parameterInfos should be an array of { name, value } objects
         * where name is query string parameter name and value is it's value.
         * includeQuestionMark is true by default.
         */
        eaf.utils.buildQueryString = function (parameterInfos, includeQuestionMark) {
          if (includeQuestionMark === undefined) {
            includeQuestionMark = true;
          }

          var qs = '';

          function addSeperator() {
            if (!qs.length) {
              if (includeQuestionMark) {
                qs = qs + '?';
              }
            } else {
              qs = qs + '&';
            }
          }

          for (var i = 0; i < parameterInfos.length; ++i) {
            var parameterInfo = parameterInfos[i];
            if (parameterInfo.value === undefined) {
              continue;
            }

            if (parameterInfo.value === null) {
              parameterInfo.value = '';
            }

            addSeperator();

            if (parameterInfo.value.toJSON && typeof parameterInfo.value.toJSON === "function") {
              qs = qs + parameterInfo.name + '=' + encodeURIComponent(parameterInfo.value.toJSON());
            } else if (Array.isArray(parameterInfo.value) && parameterInfo.value.length) {
              for (var j = 0; j < parameterInfo.value.length; j++) {
                if (j > 0) {
                  addSeperator();
                }

                qs = qs + parameterInfo.name + '[' + j + ']=' + encodeURIComponent(parameterInfo.value[j]);
              }
            } else {
              qs = qs + parameterInfo.name + '=' + encodeURIComponent(parameterInfo.value);
            }
          }

          return qs;
        }

        /**
         * Sets a cookie value for given key.
         * This is a simple implementation created to be used by eaf.
         * Please use a complete cookie library if you need.
         * @param {string} key
         * @param {string} value
         * @param {Date} expireDate (optional). If not specified the cookie will expire at the end of session.
         * @param {string} path (optional)
         * @param {string} domain (optional)
         * @param {any} attributes (optional)
         */
        eaf.utils.setCookieValue = function (key, value, expireDate, path, domain, attributes) {
          var cookieValue = encodeURIComponent(key) + '=';

          if (value) {
            cookieValue = cookieValue + encodeURIComponent(value);
          }

          if (expireDate) {
            cookieValue = cookieValue + "; expires=" + expireDate.toUTCString();
          }

          if (path) {
            cookieValue = cookieValue + "; path=" + path;
          }

          if (domain) {
            cookieValue = cookieValue + "; domain=" + domain;
          }

          for (var name in attributes) {
            if (!attributes[name]) {
              continue;
            }

            cookieValue += '; ' + name;
            if (attributes[name] === true) {
              continue;
            }

            cookieValue += '=' + attributes[name].split(';')[0];
          }

          document.cookie = cookieValue;
        };

        /**
         * Gets a cookie with given key.
         * This is a simple implementation created to be used by eaf.
         * Please use a complete cookie library if you need.
         * @param {string} key
         * @returns {string} Cookie value or null
         */
        eaf.utils.getCookieValue = function (key) {
          var equalities = document.cookie.split('; ');
          for (var i = 0; i < equalities.length; i++) {
            if (!equalities[i]) {
              continue;
            }

            var splitted = equalities[i].split('=');
            if (splitted.length != 2) {
              continue;
            }

            if (decodeURIComponent(splitted[0]) === key) {
              return decodeURIComponent(splitted[1] || '');
            }
          }

          return null;
        };

        /**
         * Deletes cookie for given key.
         * This is a simple implementation created to be used by eaf.
         * Please use a complete cookie library if you need.
         * @param {string} key
         * @param {string} path (optional)
         */
        eaf.utils.deleteCookie = function (key, path) {
          var cookieValue = encodeURIComponent(key) + '=';

          cookieValue = cookieValue + "; expires=" + (new Date(new Date().getTime() - 86400000)).toUTCString();

          if (path) {
            cookieValue = cookieValue + "; path=" + path;
          }

          document.cookie = cookieValue;
        }

        /**
         * Gets the domain of given url
         * @param {string} url
         * @returns {string}
         */
        eaf.utils.getDomain = function (url) {
          var domainRegex = /(https?:){0,1}\/\/((?:[\w\d-]+\.)+[\w\d]{2,})/i;
          var matches = domainRegex.exec(url);
          return (matches && matches[2]) ? matches[2] : '';
        }

        /* TIMING *****************************************/
        eaf.timing = eaf.timing || {};

        eaf.timing.utcClockProvider = (function () {

          var toUtc = function (date) {
            return Date.UTC(
              date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(),
              date.getUTCSeconds(), date.getUTCMilliseconds()
            );
          }

          var now = function () {
            return toUtc(new Date());
          };

          var normalize = function (date) {
            if (!date) {
              return date;
            }

            return new Date(toUtc(date));
          };

          // Public interface ///////////////////////////////////////////////////

          return {
            now: now,
            normalize: normalize,
            supportsMultipleTimezone: true
          };
        })();

        eaf.timing.localClockProvider = (function () {

          var toLocal = function (date) {
            return new Date(
              date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(),
              date.getMilliseconds()
            );
          }

          var now = function () {
            return toLocal(new Date());
          }

          var normalize = function (date) {
            if (!date) {
              return date;
            }

            return toLocal(date);
          }

          // Public interface ///////////////////////////////////////////////////

          return {
            now: now,
            normalize: normalize,
            supportsMultipleTimezone: false
          };
        })();

        eaf.timing.unspecifiedClockProvider = (function () {

          var now = function () {
            return new Date();
          }

          var normalize = function (date) {
            return date;
          }

          // Public interface ///////////////////////////////////////////////////

          return {
            now: now,
            normalize: normalize,
            supportsMultipleTimezone: false
          };
        })();

        eaf.timing.convertToUserTimezone = function (date) {
          var localTime = date.getTime();
          var utcTime = localTime + (date.getTimezoneOffset() * 60000);
          var targetTime = parseInt(utcTime) + parseInt(eaf.timing.timeZoneInfo.windows.currentUtcOffsetInMilliseconds);
          return new Date(targetTime);
        };

        /* CLOCK *****************************************/
        eaf.clock = eaf.clock || {};

        eaf.clock.now = function () {
          if (eaf.clock.provider) {
            return eaf.clock.provider.now();
          }

          return new Date();
        }

        eaf.clock.normalize = function (date) {
          if (eaf.clock.provider) {
            return eaf.clock.provider.normalize(date);
          }

          return date;
        }

        eaf.clock.provider = eaf.timing.unspecifiedClockProvider;

        /* SECURITY ***************************************/
        eaf.security = eaf.security || {};
        eaf.security.antiForgery = eaf.security.antiForgery || {};

        eaf.security.antiForgery.tokenCookieName = 'XSRF-TOKEN';
        eaf.security.antiForgery.tokenHeaderName = 'X-XSRF-TOKEN';

        eaf.security.antiForgery.getToken = function () {
          return eaf.utils.getCookieValue(eaf.security.antiForgery.tokenCookieName);
        };

        eaf.security.antiForgery.shouldSendToken = function (settings) {
          if (settings.crossDomain === undefined || settings.crossDomain === null) {
            return eaf.utils.getDomain(location.href) === eaf.utils.getDomain(settings.url);
          }

          return !settings.crossDomain;
        };

        return eaf;
      })();
    });
  }(typeof define === 'function' && define.amd
    ? define
    : function (deps, factory) {
      if (typeof module !== 'undefined' && module.exports) {
        module.exports = factory(require('jquery'));
      } else {
        window.eaf = factory(window.jQuery);
      }
    }));
